<template>
  <div class="page" data-name="sandbox">

    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a href="#" class="link icon-only panel-open" data-panel="left">
            <i class="icon f7-icons if-not-md">menu</i>
            <i class="icon material-icons if-md">menu</i>
          </a>
        </div>
        <div class="title">fossBodyBuilding</div>
      </div>
    </div>

    <div class="page-content">
      <div class="block block-strong">
        <p>
          Thanks for trying out fossBodyBuilding! This app is still under heavy
          development. Please report an issues you find on github. Thanks!
        </p>
      </div>

      <!-- TODO: TEST STUFF OUT HERE -->
      <!-- Large buttons -->
      <div class="block-title">Let's get tracking!</div>
      <div class="block block-strong">

        <p class="row">
          <button class="col button button-large button-raised button-fill">
            Track Workout
          </button>
          <button class="col button button-large button-raised button-fill">
            Track Weight
          </button>
        </p>

        <p class="row"></p>

        <p class="row">
          <button class="col button button-large button-raised button-fill">
            Track Nutrition
          </button>
          <button class="col button button-large button-raised button-fill">
            Track Size
          </button>
        </p>

        <p class="row"></p>

        <p class="row">
          <button class="col button button-large button-raised button-fill">
            Track Sleep
          </button>
          <button class="col button button-large button-raised button-fill">
            Track Steps
          </button>
        </p>

        <p class="row"></p>

        <p>Form To Data</p>


        <form class="list" id="my-form">
          <ul>
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Name</div>
                  <div class="item-input-wrap">
                    <input type="text" name="name" placeholder="Your name" />
                  </div>
                </div>
              </div>
            </li>
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">E-mail</div>
                  <div class="item-input-wrap">
                    <input type="email" name="email" placeholder="E-mail" />
                  </div>
                </div>
              </div>
            </li>
            <li>
              <div class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Gender</div>
                  <div class="item-input-wrap">
                    <select name="gender">
                      <option value="male" selected="selected">Male</option>
                      <option value="female">Female</option>
                    </select>
                  </div>
                </div>
              </div>
            </li>
            <li>
              <div class="item-content">
                <div class="item-inner">
                  <div class="item-title">Toggle</div>
                  <div class="item-after">
                    <label class="toggle toggle-init">
                      <input type="checkbox" name="toggle" value="yes" /><i class="toggle-icon"></i>
                    </label>
                  </div>
                </div>
              </div>
            </li>
          </ul>
        </form>
        <div class="block block-strong row">
          <div class="col"><a class="button button-fill convert-form-to-data" href="#">Save Data</a></div>
          <div class="col"><a class="button button-fill fill-form-from-data" href="#">Fetch Data & Fill Form</a></div>
        </div>

        <p>TEST ME DADDY</p>

        <p id="replace-me" hidden></p>

        <div class="block block-strong row">
          <div class="col"><a class="button button-fill add-set-button" href="#">Add SET</a></div>
          <div class="col"><a class="button button-fill add-rest-button" href="#">Add REST PERIOD</a></div>
          <div class="col"><a class="button button-fill remove-set-button" href="#">REMOVE SET</a></div>
        </div>

      </div>
    </div>
  </div>
</template>

<script>
  export default (props, { $, $on, $f7 }) => {
    $on('pageInit', () => {
      var exerciseAction = 0;
      var setNumber = 0;

      $('.add-set-button').on('click', async () => {
        exerciseAction++;
        setNumber++;

        var paddedExerciseActionNumberStr = `${exerciseAction}`.padStart(3, "0");
        var paddedSetNumberStr = `${setNumber}`.padStart(3, "0");
        var newHtmlElementID = `exercise-###-action-${paddedExerciseActionNumberStr}-set-${paddedSetNumberStr}`;

        var newHtmlElement = `<div class="block block-strong row" id="${newHtmlElementID}">`;

        newHtmlElement += `<div class="col">SET #${setNumber}</div>`;
        newHtmlElement += `<div class="col"><input type="number" name="exercise-###-action-${paddedExerciseActionNumberStr}-set-${paddedSetNumberStr}-reps" placeholder="SET #${setNumber} REPS" /></div>`;

        newHtmlElement += "</div>";
        newHtmlElement += '\n<p id="replace-me" hidden></p>';

        var htmlElement = document.getElementById('replace-me');
        htmlElement.outerHTML = newHtmlElement;
      });

      $('.remove-set-button').on('click', async () => {
        if (exerciseAction === 0 && setNumber === 0) {
          return;
        }
        var paddedExerciseActionNumberStr = `${exerciseAction}`.padStart(3, "0");
        var paddedSetNumberStr = `${setNumber}`.padStart(3, "0");
        var elementNameToRemove = `exercise-###-action-${paddedExerciseActionNumberStr}-set-${paddedSetNumberStr}`;
        console.log(`Removing ${elementNameToRemove}`)

        var htmlElement = document.getElementById(elementNameToRemove);
        htmlElement.remove();

        setNumber--;
        exerciseAction--;
      });

      $('.convert-form-to-data').on('click', async () => {
        var formData = $f7.form.convertToData('#my-form');

        //TODO: try to save formData to an objectStore
        const objectStoreName = "testObjectStore";
        const key = "formData2"
        const item = formData
        var putResult = await dbAdapter.put(objectStoreName, key, item);

        if (putResult === undefined) {
          alert(JSON.stringify("Data save successful!"));
        } else {
          alert(JSON.stringify("Data save failed!"));
        }
      });

      $('.fill-form-from-data').on('click', async () => {

        //TODO: try to fetch formData from objectStore
        const objectStoreName = "testObjectStore";
        const key = "formData2";
        var getResult = await dbAdapter.get(objectStoreName, key);

        var formData;

        if (getResult === undefined) {
          // set some default values
          formData = {
            'name': 'John',
            'email': 'john@doe.com',
            'gender': 'female',
            'toggle': ['yes'],
          }
        } else {
          // set to loaded values
          formData = getResult;
        }

        $f7.form.fillFromData('#my-form', formData);
      });

    });

    return $render;
  }
</script>